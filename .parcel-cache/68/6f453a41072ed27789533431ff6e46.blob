{"mappings":";MAAM,+CAAS,GAAG,CAAC,EAAC,SAAW;IAC3B,yCAAG,GAAE,QAAQ,CAAC,aAAa,EAAC,KAAO;IACnC,uCAAC,GAAG,QAAQ,CAAC,cAAc,EAAC,MAAQ;AACxC,yCAAG,CAAC,gBAAgB,EAAC,KAAO,GAAC,wCAAE;AAC/B,yCAAG,CAAC,gBAAgB,EAAC,KAAO,GAAC,wCAAE;SAEtB,wCAAE;IACH,uCAAC,CAAC,KAAK,CAAC,OAAO,IAAG,KAAO;;SAExB,wCAAE;;AACX,+CAAS,CAAC,OAAO,IAAG,IAAM;AAE1B,yCAAG,CAAC,gBAAgB,EAAC,IAAM;IACvB,uCAAC,CAAC,KAAK,CAAC,OAAO,IAAE,IAAM;;MAGrB,6CAAO,GAAG,+CAAS,CAAC,IAAI,EAAC,OAAS;MAClC,uCAAC,GAAG,YAAY,CAAC,OAAO,EAAC,CAAG,EAAE,EAAA,6CAA+C;;MACvD,6CAAf,GAAG,IAAI,CAAC,KAAK,CAAC,uCAAC,CAAE,EAAA,0CAA4C;;MAChD,6CAAb,GAAG,6CAAO;;QACjB,IAAI,GAAE,CAAG;QAAE,GAAG,GAAE,oBAAsB;;;QACtC,IAAI,GAAE,CAAG;QAAE,GAAG,GAAE,wBAA0B;;;MAE1C,iDAAW,IAAI,GAAG;WACb,GAAG,CAAC,OAAO,EAAC,QAAU,OACxB,OAAO,EAAC,OAAS,OACjB,OAAO,EAAC,IAAM,OACd,OAAO,aAAa,CAAA,EAAA,sKAAwK;;MAEjG,4CAAxF;IACR,+CAAS,CAAC,IAAI,EAAC,aAAe,GAAE,MAAM,GAAG,CAAA,EAAA,oCAAsC;IACvD,6CAAjB,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK;cAClB,GAAG,GAAG,CAAC,EAAE,kEAEO,EAAE,IAAI,CAAC,IAAI,CAAC,sCACZ,EAAE,iDAAW,CAAC,IAAI,CAAC,GAAG,EAAE,0MAOzC,GAAG,YAAY,CAAC,6CAAO;QAC5B,OAAO,CAAC,GAAG,CAAC,GAAG;QACf,GAAG,CAAC,EAAE,EAAC,KAAO;YACV,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;;QAExB,GAAG,CAAC,EAAE,EAAC,KAAO,IAAE,MAAQ,IAAG,CAAC;YACxB,CAAC,CAAC,eAAe,GAAG,CAAA,EAAA,0BAA4B;YAClC,6CAAP,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACvB,4CAAM;;;;AAKlB,4CAAM,GAAG,CAAA,EAAA,qBAAuB;AAElB,CAAb,EAAC,UAAY,GACT,EAAE,EAAC,KAAO;QACH,GAAG,GAAG,MAAM,EAAC,uCAAe;QACF,GAAvB,CAAC,OAAO,EAAC,KAAO,OAAM,CAAC,EAC1B,GAAG,IAAG,QAAU,IAAG,GAAG;IAG1B,6CAAO,CAAC,IAAI;QACR,IAAI,EAAE,iDAAW,CAAC,GAAG,EAAE,CAAC,EAAE,WAAW;QACrC,GAAG,EAAE,GAAG;;IAEZ,4CAAM,GAAG,CAAA,EAAA,kCAAoC;;AAE/B,MAAhB,CAAC,cAAc;UACX,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,6CAAO,CAAE,EAAA,0CAA4C;;IAC1D,YAAhB,CAAC,OAAO,EAAC,CAAG,GAAE,SAAS;;AAEvC,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAC,QAAU,IAAG,CAAC;iBACjB,GAAG,MAAK,CAAC;YACR,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,6CAAO,CAAC,MAAM,EAAE,CAAC,OAC7B,6CAAO,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,OAAO,GAAG,EACrC,MAAM,CAAC,IAAI,CAAC,6CAAO,CAAC,CAAC,EAAE,GAAG","sources":["src/main.js"],"sourcesContent":["const $siteList = $('.siteList')\r\nvar put =document.querySelector(\"input\")\r\nvar d = document.getElementById(\"marker\")\r\nput.addEventListener(\"click\",f1)\r\nput.addEventListener(\"click\",f2)\r\n\r\nfunction f1() {\r\n        d.style.display = \"block\";\r\n}\r\nfunction f2() {}\r\n$siteList.display = \"none\"\r\n\r\nput.addEventListener(\"blur\",function () {\r\n    d.style.display =\"none\"\r\n})\r\n\r\nconst $lastLi = $siteList.find('li.last')\r\nconst x = localStorage.getItem('x') //获取localStorage，第一次执行的为空\r\nconst xObject = JSON.parse(x) //将localStorage从字符串转化为对象\r\nconst hashMap = xObject || [ //渲染哈希，或逻辑，如果xObject有内容则渲染，无则渲染后者\r\n    { logo: 'A', url: 'https://www.acfun.cn' },\r\n    { logo: 'B', url: 'https://www.bilibili.com' }\r\n]\r\nconst simplifyUrl = (url) => { //删除网址前缀,简化url\r\n    return url.replace('https://', '') //replace后会产生新的字符串，故不能直接return原来的url\r\n        .replace('http://', '')\r\n        .replace('www.', '')\r\n        .replace(/\\/.*/, '') //删除斜杆后面的内容——  / \\ /.*/   /为斜杆，\\为反斜杆，反斜杆为转义字符，表示斜杆用：\\ /  ,表示斜杆后面的所有内容： /.*\r\n}\r\nconst render = () => { //声明渲染函数\r\n    $siteList.find('li:not(.last)').remove() //移除已有网址防止重新渲染\r\n    hashMap.forEach((node, index) => {\r\n        const $li = $(`<li>\r\n          <div class=\"site\">\r\n            <div class=\"logo\">${node.logo}</div>\r\n            <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n            <div class=\"close\">\r\n              <svg class=\"icon\">\r\n                <use xlink:href=\"#icon-close\"></use>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </li>`).insertBefore($lastLi)\r\n        console.log($li);\r\n        $li.on('click', () => {\r\n            window.open(node.url)\r\n        })\r\n        $li.on('click', '.close', (e) => {\r\n            e.stopPropagation() //阻止冒泡到close按钮\r\n            hashMap.splice(index, 1)\r\n            render()\r\n\r\n        })\r\n    })\r\n}\r\nrender() //先全部渲染一遍\r\n\r\n$('.addButton')\r\n    .on('click', () => { //添加点击事件，新增网址卡片\r\n        let url = prompt('请输入你要新增网站的网址：')\r\n        if (url.indexOf('https') !== 0) {\r\n            url = 'https://' + url\r\n        }\r\n\r\n        hashMap.push({ //将新增网址内容插入哈希数组读档\r\n            logo: simplifyUrl(url)[0].toUpperCase(),\r\n            url: url,\r\n        });\r\n        render() // 重新渲染哈希数组以读档\r\n    });\r\nwindow.onbeforeunload = () => {\r\n    const myStorage = JSON.stringify(hashMap) //将哈希数组从对象转化为字符串\r\n    localStorage.setItem('x', myStorage)\r\n}\r\n$(document).on('keypress', (e) => { //监听键盘事件\r\n    const { key } = e\r\n    for (let i = 0; i < hashMap.length; i++) { //遍历哈希，找到键盘按下的键与之对应的哈希\r\n        if (hashMap[i].logo.toLowerCase() === key) {\r\n            window.open(hashMap[i].url)\r\n        }\r\n    }\r\n})"],"names":[],"version":3,"file":"index.HASH_REF_83d4711ea689fc47f03deb70f03c99b4.js.map"}